name: 'WinGet Updater'
description: 'Publish updates of your application to Windows Package Manager automatically.'

branding:
  color: blue
  icon: upload-cloud

inputs:
  komac-version:
    description: 'Which Komac version to use.'
    required: false
    default: '1.11.0'
  package-id:
    description: 'The ID of the package to update.'
    required: true
  repo:
    description: 'The GitHub repository to check for the latest release.'
    required: true
  url:
    description: 'The URL to the latest release.'
    required: true

runs:
  using: "composite"
  steps:
    - name: Detect Latest Release
      id: latest_release
      uses: actions/github-script@v6
      with:
        script: |
          const [owner, repo] = '${{ inputs.repo }}'.split('/');
          try {
            const { data } = await github.rest.repos.getLatestRelease({ owner, repo });
            const tagName = data.tag_name.startsWith('v') ? data.tag_name.substring(1) : data.tag_name;
            return tagName;
          } catch (error) {
            console.error(`Failed to get latest release for repo: ${owner}/${repo}`);
            core.setFailed('Failed to get the latest release.');
          }

    - name: Compose URL
      shell: bash
      run: |
        VERSION=${{ steps.latest_release.outputs.result }}
        URL=${{ inputs.url }}
        FINAL_URL=$(echo $URL | sed "s/{VERSION}/$VERSION/g")
        echo "FINAL_URL=$FINAL_URL" >> $GITHUB_ENV
        echo "Detected latest Version: ${{ steps.latest_release.outputs.result }}"
        echo "Final URL: $FINAL_URL"

    - name: Run Komac
      uses: michidk/run-komac@v1
      continue-on-error: true
      with:
        komac-version: ${{ inputs.komac-version }}
        args: update --id ${{ inputs.package-id }} --version ${{ steps.latest_release.outputs.result }} --url $FINAL_URL --submit --token ${{ secrets.KOMAC_TOKEN }}
